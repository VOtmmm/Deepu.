module.exports.config = {
  name: "leave",
  eventType: ["log:unsubscribe"],
  version: "1.1.0",
  credits: "ARIF BABU",
  description: "MADE BY ARIF BABU GIF",
  dependencies: {
    "fs-extra": "",
    "axios": "",
    "path": "",
    "moment-timezone": ""
  }
};

module.exports.run = async function({ api, event, Users }) {
  const axios = require('axios');
  const moment = require("moment-timezone");
  const { createWriteStream, existsSync, mkdirSync } = global.nodemodule["fs-extra"];
  const { join } = global.nodemodule["path"];
  const { threadID } = event;

  if (event.logMessageData.leftParticipantFbId == api.getCurrentUserID()) return;

  const name = await Users.getNameUser(event.logMessageData.leftParticipantFbId) || "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ";
  const type = (event.author == event.logMessageData.leftParticipantFbId) ? "‡§ñ‡•Å‡§¶ ‡§π‡•Ä ‡§≠‡§æ‡§ó ‡§ó‡§Ø‡§æ üòêüëà" : "‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡•á ‡§ó‡•Å‡§∏‡•ç‡§∏‡•á ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§ï‡§æ‡§≤ ‡§¶‡§ø‡§Ø‡§æ‡•§ üòëüëà";

  // Time-Based Session
  const hours = moment.tz("Asia/Kolkata").format("HH");
  const date = moment.tz("Asia/Kolkata").format("DD/MM/YYYY");
  const time = moment.tz("Asia/Kolkata").format("HH:mm:ss");
  let session;

  if (hours >= 5 && hours < 12) {
    session = "‡§∏‡•Å‡§¨‡§π";
  } else if (hours >= 12 && hours < 17) {
    session = "‡§¶‡•ã‡§™‡§π‡§∞";
  } else if (hours >= 17 && hours < 21) {
    session = "‡§∂‡§æ‡§Æ";
  } else {
    session = "‡§∞‡§æ‡§§";
  }

  const path = join(__dirname, "cache", "leaveGif");
  if (!existsSync(path)) mkdirSync(path, { recursive: true });

  // Imgur GIF Links
  const gifLinks = [
    "https://i.imgur.com/JcOz9cr.gif",
    "https://i.imgur.com/JdID1o7.gif",
    "https://i.imgur.com/JcOz9cr.gif",
    "https://i.imgur.com/JdID1o7.gif"
  ];

  const randomGif = gifLinks[Math.floor(Math.random() * gifLinks.length)];
  const gifPath = join(__dirname, "cache", "leaveGif", `${threadID}.gif`);

  // Message format with time-based session
  let msg = `‚ùÅ ‚îÅ‚îÅ[ ùóöùó¢ùó¢ùóó ùóïùó¨ùóò ]‚îÅ‚îÅ ‚ùÅ\n\n ‡§∏‡•Å‡§ï‡§∞ ‡§π‡•à ‡§è‡§ï ‡§†‡§∞‡§ï‡•Ä ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ï‡§Æ ‡§π‡•ã ‡§ó‡§Ø‡§æ üòÉ‚úåÔ∏è\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚ï∞‚îà‚û§ ‡§â‡§∏‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§π‡•à íÅç ${name} \n‚ï∞‚îà‚û§ ‡§∞‡•Ä‡§ú‡§® íÅç ${type}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nùêåùêÄùêÉùêÑ ùêÅùêò üçíüòê DEEPU`;

  try {
    // Download the GIF from Imgur
    const response = await axios({
      url: randomGif,
      method: 'GET',
      responseType: 'stream'
    });

    // Save the GIF to the file system
    const writer = createWriteStream(gifPath);
    response.data.pipe(writer);

    // Wait for the GIF to finish downloading
    writer.on('finish', () => {
      // Send the GIF with the message
      api.sendMessage({
        body: msg,
        attachment: require("fs").createReadStream(gifPath)
      }, threadID);
    });

    writer.on('error', () => {
      api.sendMessage("GIF ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à‡•§", threadID);
    });

  } catch (error) {
    api.sendMessage("‡§ï‡•Å‡§õ ‡§ó‡§°‡§º‡§¨‡§°‡§º ‡§π‡•ã ‡§ó‡§à‡•§ GIF ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§•‡•§", threadID);
  }
}
